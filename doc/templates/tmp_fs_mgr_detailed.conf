##########################################
# Robinhood configuration file template  #
##########################################

# Global configuration
General
{
    # filesystem to be monitored
    fs_path = "/mnt/lustre" ;

    # filesystem type (as returned by 'df' or 'mount' commands)
    fs_type = "lustre" ;

    # file for suspending all actions
    lock_file = "/var/locks/robinhood.lock" ;

    # check that objects are in the same device as 'fs_path',
    # so it will not traverse mount points
    stay_in_fs = TRUE ;

    # check that the filesystem is mounted
    check_mounted = TRUE ;
}

# Log configuration
Log
{
    # Log verbosity level
    # Possible values are: CRIT, MAJOR, EVENT, VERB, DEBUG, FULL
    debug_level = EVENT ;

    # Log file
    log_file = syslog ; # log using syslog (see also 'syslog_facility' parameter)
    # can also be a file. E.g. log_file = "/var/log/robinhood.log";

    # specifies the syslog facility and priority
    syslog_facility = local1.info;

    # File for reporting purge events
    report_file = "/var/log/robinhood_reports.log" ;

    # set alert_file, alert_mail or both depending on the alert method you wish
    alert_file = "/var/log/robinhood_alerts.log" ;
    alert_mail = "root@localhost" ;

    # Interval for dumping stats (to logfile)
    stats_interval = 20min ;

    # Alert batching (to send a digest instead of 1 alert per file)
    # 0: unlimited batch size, 1: no batching (1 alert per file),
    # N>1: batch N alerts per digest
    batch_alert_max = 5000 ;
    # Give the detail of entry attributes for each alert?
    alert_show_attrs = FALSE ;
}

# List Manager configuration
ListManager
{
    # Method for committing information to database.
    # Possible values are:
    # - "autocommit": weak transactions (more efficient, but database inconsistencies may occur)
    # - "transaction": manage operations in transactions (best consistency, lower performance)
    # - "periodic(<nb_transaction>)": periodically commit (every <n> transactions). This gives more
    #   performances for in-file databases like SQLite.
    commit_behavior = autocommit ;

    # Minimum time (in seconds) to wait before trying to reestablish a lost connection.
    # Then this time is multiplied by 2 until reaching connect_retry_interval_max
    connect_retry_interval_min = 1 ;
    connect_retry_interval_max = 30 ;

    MySQL
    {
        server = "localhost" ;
        db     = "robinhood_db" ;
        user   = "robinhood" ;
        password = "robinhood";
#        password_file = "/etc/robinhood.d/tmpfs/.dbpassword" ;
        # innodb = enabled;
    }

#       user_acct = FALSE;
#       group_acct = FALSE;
}

# Entry Processor configuration
EntryProcessor
{
    # nbr of worker threads for processing pipeline tasks
    nb_threads = 8 ;

    # Max number of operations in the Entry Processor pipeline.
    # If the number of pending operations exceeds this limit,
    # info collectors are suspended until this count decreases
    max_pending_operations = 10000 ;

    # match classes at scan/discovery time (not only when applying the policies)
    # and according to db_info_update policy
    match_classes = TRUE;

    # Optionnaly specify a maximum thread count for each stage of the pipeline:
    # <stagename>_threads_max = <n> (0: use default)
    # STAGE_CHECK_EXIST_threads_max	= 8 ;
    # STAGE_GET_EXTRA_INFO_threads_max	= 8 ;
    # STAGE_INFER_ATTRS_threads_max	= 8 ;
    # STAGE_REPORTING_threads_max	= 8 ;
    # STAGE_DB_APPLY_threads_max	= 8 ;

    # Raise alerts for (recent) directories with too many entries
    Alert too_many_entries_in_directory
    {
        type == directory
        and
        dircount > 10000
	and
	last_mod < 1d
    }

    # Raise alerts for large files
    Alert large_file
    {
        type == file
        and
        size > 100GB
	and
	last_mod < 1d
    }
}

# FS Scan configuration
FS_Scan
{
    # Min/max intervals for scanning filesystem namespace.
    # The interval for scanning is computed according to this formula:
    # min + (100Successax storage usage)*(max-min)
    # so the more the filesystem is full, the more frequently it is scanned.
    min_scan_interval      =    2h ;
    max_scan_interval      =   12h ;

    # number of threads used for scanning the filesystem
    nb_threads_scan        =     2 ;

    # when a scan fails, this is the delay before retrying
    scan_retry_delay       =    1h ;

    # timeout for operations on the filesystem
    scan_op_timeout        =    1h ;

    # Internal scheduler granularity (for testing and of scan, hangs, ...)
    spooler_check_interval =  1min ;

    # Memory preallocation parameters
    nb_prealloc_tasks      =   256 ;

    Ignore
    {
        # ignore ".snapshot" and ".snapdir" directories (don't scan them)
        type == directory
        and
        ( name == ".snapdir" or name == ".snapshot" )
    }
}

# Policies configuration
#### File Class definitions ####

Filesets
{
    FileClass	Experiment_A
    {
        definition { tree == "/mnt/lustre/dir_A" }
    }

    FileClass	visualization
    {
        definition
        {
            tree == "/mnt/lustre/dir_*"
            and
            xattr.user.tag_visu == "1"
        }
    }

    FileClass	pool_ssd
    {
        definition { ost_pool == "ssd*" }
    }

    FileClass  visu_on_ssd
    {
	# example of fileclass unions and intersections
	definition { pool_ssd inter visualization }
    }

    FileClass  visu_on_ssd_or_expA
    {
	# example of fileclass unions and intersections
	definition { (pool_ssd inter visualization) union not Experiment_A }
    }

}

purge_policies
{
    # Do not purge files accessed recently, or whose size is 0,
    # or located in "/mnt/lustre/system_files" directory.
    ignore
    {
        last_access < 1h
        or size == 0
        or tree == "/mnt/lustre/system_files"
    }

    # do not purge files in fileclass "pool_ssd"
    ignore_fileclass = pool_ssd ;

    # Purge files of class 'Experiment_A' after 24h
    policy	expA_1day
    {
        target_fileclass = Experiment_A ;
        condition
        {
            last_mod > 24h
            and
            last_access > 6h
        }
    }

    # Release files of class 'visualization' after 1 month,
    # if they are not accessed for more that 3 days
    policy	visu_1month
    {
        target_fileclass = visualization ;
        condition
        {
            last_mod > 30d
            and
            last_access > 3d
        }
    }

    # Default purge policy.
    # This applies to files that don't match previous fileclasses, i.e:
    #   - don't match the 'ignore' block
    #   - don't match a fileclass of 'ignore_fileclass' directives
    #   - don't match any 'target_fileclass' of purge policies above
    policy	default
    {
        condition
        {
            last_access > 12h
        }
    }
}

rmdir_policy
{
    # Remove directories that have been empty for more than 8 days
    age_rm_empty_dirs   = 8d ;

    # don't remove dirs that owns to 'root' or whose depth < 2
    ignore
    {
        owner == root
        or depth < 2
    }
}

# Resource Monitor configuration
Purge_Parameters
{
    # nbr of thread for performing purge operations
    nb_threads_purge      = 4 ;

    # Immediately after purging data, 'df'/'ost df' may not return an exact value,
    # especially if freeing disk space is asynchronous.
    # So, it is necessary to wait for a while after a purge before
    # issuing a new 'df'/'ost df' command.
    post_purge_df_latency = 1min ;

    # queue size (for leveraging purge threads load)
    purge_queue_size      = 4096 ;

    # Limit the size of database result sets (save memory)
    db_result_size_max    = 10000 ;

    # alternative purge command (default is built-in unlink())
    #purge_command = "/usr/bin/move_to_trash.sh {path}";
}

# Trigger purge on individual OST usage
Purge_Trigger
{
    trigger_on         = OST_usage ;
    high_threshold_pct = 85% ;
    low_threshold_pct  = 80% ;
    check_interval     = 5min ;
}

# Trigger purge on filesystem usage
Purge_Trigger
{
    trigger_on         = global_usage ;
    high_threshold_pct = 90% ;
    low_threshold_pct  = 85% ;
    check_interval     = 5min ;

    # send mail when the high-threshold is reached
    alert_high = TRUE;

    # do not raise alert if the low threshold cannot be reached
    alert_low  = FALSE;
}


# Empty Dir Remover configuration
Rmdir_Parameters
{
    # Interval for performing empty directory removal
    runtime_interval = 12h ;

    # Number of threads for performing rmdir operations
    nb_threads_rmdir = 4 ;

    # Queue size (for leveraging rmdir threads load)
    rmdir_queue_size = 256 ;
}

db_update_policy
{
	md_update   = on_event_periodic(1sec,1min);
# For Lustre v2 filesystems only:
#	path_update = on_event_periodic(10sec,6h);
	fileclass_update = periodic(30min);
}
