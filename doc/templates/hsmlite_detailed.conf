# -*- mode: c; c-basic-offset: 4; indent-tabs-mode: nil; -*-
# vim:expandtab:shiftwidth=4:tabstop=4:

###### file classes definitions ######

Filesets {

    # root's files in /mnt/lustre/project_A
    FileClass root_files_A
    {
          definition
          {
            tree == "/mnt/lustre/project_A"
            and
            owner == "root"
          }

          # Migration hint for archiving files of this class
          # (this information is passed to the copytool).
          # This hint is concatenated to policy specific hints
          migration_hints = "cos=1" ;
    }

    # user files in /mnt/lustre/project_A
    FileClass user_files_A
    {
          definition
          {
             tree == "/mnt/lustre/project_A"
             and
             owner != "root"
          }
          migration_hints = "cos=14" ;
    }

    # files in /mnt/lustre/project_B that satisfy an external command
    FileClass user_files_B
    {
          definition
          {
            tree == "/mnt/lustre/project_B"
#            and 
            # command that returns 0 if file matches
#            not external_command( "/usr/bin/test_file.sh {fullpath}" )
          }
          migration_hints = "cos=5";
    }


    # files with owner 'foo' or group 'bar' and with xattr "LustrePE.tag_no_copy" == 1
    FileClass foobar_no_copy
    {
          definition
          {
             (
                owner == "foo"
                or
                group == "bar"
            )
            and
            xattr.user.LustrePE.tag_no_copy == 1
          }
    }
}


###### migration policy definitions ######

Migration_policies
{

    # files we never want to archive
    ignore
    {
        size < 1KB
        or
        tree == "/mnt/lustre/tmp/logs"
    }

    # alternative way to ignore files:
    ignore_fileclass = foobar_no_copy ;

    # migrate files to tape using older library, set group of tape same as FileClass name,
    # use 3 tape drives max, low priority migration
    # "Lazy" migration for older files or files continuously appended 

    policy archive_user_files_A
    {
          target_fileclass = user_files_A ;

          condition
          {
              last_mod > 3h
          }

        # several hints can be specified
        # they are concatenated using "," as separator
        # hints string can include the following parameters:
        # - {policy}: the name of the migration policy (e.g. archive_user_files_A).
        # - {fileclass}: fileclass of the file (e.g. user_files_A).
        # - {path}: posix path of the entry
        # - {name}: filename of the entry
        # - {pool}: OST pool name associated to the entry
        migration_hints = "tapeLibrary=CD-9940";
        migration_hints = "file_family={fileclass}";
        migration_hints = "file_family_width=3,priority=3";
        migration_hints = "matching_policy={policy}";
        migration_hints = "posix_path={path}";
    }

    # copy file 1h after they have been modified,
    # or 6h after last archival, if it is continuouly modified
    policy high_priority_copy
    {
        # target file classes
        target_fileclass = root_files_A;

        condition { last_mod > 1h }

        migration_hints = "tapeLibrary=CD-9940B";
        migration_hints = "file_family={FileClass}";
        migration_hints = "file_family_width=1";
        migration_hints = "priority=5";
    }

    # Default migration policy.
    # This applies to files that don't match previous fileclasses, i.e:
    #   - don't match the 'ignore' block
    #   - don't match a fileclass of 'ignore_fileclass' directives
    #   - don't match any 'target_fileclass' of migration policies above

    policy default
    {
        # archive files that have not been modified for 6 hours
        condition
        {
            last_mod > 6h
        }

        migration_hints = "cos=default";
    }

}

##### HSM remove policy ########

hsm_remove_policy
{
    # enable deferred removal in backend
    hsm_remove = TRUE;
    # delay before impacting object removal in HSM
    deferred_remove_delay = 24h;
}

##### General migration parameters #####

Migration_parameters
{
    # numbers of threads used for performing archive requests
    nb_threads_migration = 4;

    # check for files to be copied-out every 15min
    runtime_interval = 15min;

    # stop migration pass when this number of outstanding copy operations
    # is reached
    max_migration_count = 10000;
    max_migration_volume = 10TB;

    # do we check running copies when the daemon restarts?
    check_copy_status_on_startup = TRUE;

    # delay for checking copy status if no feedback has been received
    check_copy_status_delay = 1h;

    ### pre-maintenance mode to ensure all data is archived at maintenance time ###
    # start more aggressive migration 6h before maintenance
    pre_maintenance_window = 6h;
    # anyhow, don't migrate files modified in the last 10 min
    maint_migr_delay_min = 10min;
}

############ HSM file removal parameters #################

hsm_remove_parameters
{
    # Interval for checking files to be removed in HSM
    runtime_interval = 10min ;

    # Number of threads to perform hsm rm operations
    nb_threads_rm = 4 ;

    # Queue size (for leveraging rm threads load)
    rm_queue_size = 256 ;

    # maximum number of remove requests per pass
    # (0: unlimited)
    max_rm_count   = 0 ;
}

#### general Filesystem info ####
General
{
	fs_path = /mnt/lustre;
}

# Backend configuration
Backend
{
    # backend path and type
    root          = "/backend";
    mnt_type      = nfs;
    # copy wrapper script
    action_cmd    = "/usr/sbin/rbhext_tool";
    copy_timeout  = 6h;
    xattr_support = FALSE;
    # check if the backend is mounted on startup
    check_mounted = TRUE;
}


# ChangeLog Reader configuration
# Parameters for processing MDT changelogs :
ChangeLog
{
    # 1 MDT block for each MDT :
    MDT
    {
        # name of the first MDT
        mdt_name  = "MDT0000" ;

        # id of the persistent changelog reader
        # as returned by "lctl changelog_register" command
        reader_id = "cl1" ;
    }
    # clear changelog every 100 records:
    batch_ack_count = 100;

    force_polling = ON;
    polling_interval = 1s; 
}

Log
{
    # Log verbosity level
    # Possible values are: CRIT, MAJOR, EVENT, VERB, DEBUG, FULL
    debug_level = EVENT;

    # Log file
    log_file = "/var/log/robinhood/rbh.log";

    # File for reporting migartion events
    report_file = "/var/log/robinhood/rbh_reports.log";

    # set alert_file, alert_mail or both depending on the alert method you wish
    alert_file = "/var/log/robinhood/rbh_alerts.log";

}

ListManager
{
	MySQL
	{
		server = "localhost";
		db = "robinhood_lustre";
		user = "robinhood";
		# password or password_file are mandatory
		password = "robinhood";
        # innodb = enabled;
	}
#       user_acct = FALSE;
#       group_acct = FALSE;
}

db_update_policy
{
	md_update   = on_event_periodic(1sec,1min);
	path_update = on_event_periodic(10sec,6h);
	fileclass_update = periodic(30min);
}
